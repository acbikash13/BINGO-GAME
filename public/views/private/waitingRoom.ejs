<!-- THis page will host as the waiting room as the game is being hosted and other player is about to join the game.
-->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Waitroom</title>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    />
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Rubik+Bubbles&display=swap"
      rel="stylesheet"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Rubik+Bubbles&family=Sevillana&display=swap"
      rel="stylesheet"
    />
    <style>
      .mainDiv {
        border-radius: 35px;
      }
      div {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
      }
      h1,
      h2 {
        font-family: "Rubik Bubbles", sans-serif;
      }
      li {
        color: rgb(66, 10, 197);
        font-size: 35px;
        font-weight: light;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
      }
      .gameOptions {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-flow: row wrap;
        gap: 50px;
      }
      button {
        background-color: rgb(245, 242, 238);
        border-radius: 80%;
        box-shadow: rgba(0, 0, 0, 0.4) 0px 30px 90px;
      }
      #startGame {
        display: none;
      }
      /* Define the movement and color change for the animated circle */
      .animate-circle {
        animation: move-right 0.5s forwards, change-color 0.5s forwards;
      }

      /* Animation to move the circle to the right */
      @keyframes move-right {
        from {
          cx: 3;
        }
        to {
          cx: 9;
        }
      }

      /* Animation to change the circle color to green */
      @keyframes change-color {
        from {
          fill: red;
        }
        to {
          fill: green;
        }
      }
    </style>
  </head>
  <body class="bg-light">
    <div class="container p-3 bg-light shadow-lg my-5 mainDiv">
      <div>
        <h1 class="">Game ID: <%= gameId%></h1>
        <h2 class="display-1">Players Joined</h2>
      </div>
      <ol></ol>
      <div class="gameOptions">
        <button
          type="button"
          id="ready"
          class="btn btn-info p-3"
          style="border-radius: 60%"
        >
          Ready
        </button>
        <button
          type="button"
          id="startGame"
          class="btn btn-info p-3"
          style="border-radius: 60%"
        >
          Start
        </button>
        <button
          type="button"
          id="exitGame"
          class="btn btn-info p-3"
          style="border-radius: 60%"
        >
          Exit
        </button>
      </div>
    </div>
  </body>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <!-- Popper JS -->
  <script
    src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
    integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
    crossorigin="anonymous"
  ></script>
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
    integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
    crossorigin="anonymous"
  ></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.6/axios.min.js"></script>
  <script
    src="https://cdn.socket.io/4.7.2/socket.io.min.js"
    integrity="sha384-mZLF4UVrpi/QTWPA7BjNPEnkIfRFn4ZEO3Qt/HFklTJBj/gBOV8G3HcKn4NfQblz"
    crossorigin="anonymous"
  ></script>
  <script src="../../controller/cookies.js"></script>
  <script>
    const socket = io();
    socket.on("connect", () => {
      let role = `<%= role %>`;
      if (role === "host") {
        $("#startGame").css("display", "block");
        $("#ready").css("display", "none");
      }
      //data = {playersName:playersName}
      let playersFirstName = {
        playersName: `<%-playersName %>`,
        gameId: Number(`<%= gameId %>`),
        userId: `<%= userId %>`,
      };
      let gameId = playersFirstName.gameId;
      let playersListWithTheirId = playersFirstName.playersName
        .substring(1, playersFirstName.playersName.length - 1)
        .split(",");

      // we  were getting playersName in A sting. each item was seperated by a comma
      let newPlayersJoinedListAsListOfObject = playersListWithTheirId.map(
        (item) => {
          return JSON.parse(item);
        }
      );

      playersFirstName = {
        playersName: JSON.stringify(newPlayersJoinedListAsListOfObject),
        gameId: Number(`<%= gameId %>`),
        userId: `<%= userId %>`,
      };
      // playersFirstName.playersName = newPlayersJoinedListAsListOfObject;

      socket.emit("playerJoined", playersFirstName);
      socket.on("playerJoined", (playersFirstName) => {
        $("ol").empty();
        let listOfPlayers = playersFirstName.playersName
          .substring(1, playersFirstName.playersName.length - 1)
          .split(",");

        for (items of listOfPlayers) {
          let playersFirstNameAndId = JSON.parse(items);
          for (let userId in playersFirstNameAndId) {
            $("ol").append(`
            <li class="custom-p">${playersFirstNameAndId[userId]} 
           <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" id = "${userId}">
            <!-- Track -->
            <path 
                d="M3 5
                h5.5
                a3 3 0 0 1 3 3
                v0
                a3 3 0 0 1 -3 3
                h-5.5
                a3 3 0 0 1 -3 -3
                v0
                a3 3 0 0 1 3 -3
                z"
                class = "rectangle-path"
                fill="none"
                stroke="red"
                stroke-width="0.3"
            />
            
            <!-- Toggle circle -->
            <circle 
                cx="3" 
                cy="8" 
                r="2" 
                fill="white"
                stroke="#94a3b8"
                class = "toggle-circle"
                stroke-width="0.1"
                filter="drop-shadow(0 1px 1px rgb(0 0 0 / 0.1))"
            />
            </svg>
            </li>`);
          }
        }
      });
      $("#ready").on("click", function () {
        // set the player isReady status to true in the game document.
        $("#ready").css("display", "none");
        axios({
          method: "post",
          url: "/game/setReady", // Update the URL to your protected profile route
          headers: {
            Authorization: `Bearer ${cookies.get("jwt")}`,
          },
          data: {
            gameId: gameId,
          },
        })
          .then(function (response) {
            if (response.status == 200) {
              socket.emit("isReady", {
                userId: response.data.userId,
                gameId: "<%= gameId %>",
              });
            } else {
              alert(response.data.message);
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      });
      $("#startGame").on("click", function () {
        axios({
          method: "post",
          url: "/game/startGame",
          headers: {
            Authorization: `Bearer ${cookies.get("jwt")}`,
          },
          data: {
            gameId: gameId,
          },
        }).then(function (response) {
          if (response.status == 200) {
            $("startGame").css("display", "none");
            let userIdForThisClient = response.data.userId;
            $("#" + userIdForThisClient).css("fill", "green");
            let data = { message: response.data.message };
            socket.emit("startGame", data.message);
            socket.emit("isReady", {
              userId: response.data.userId,
              gameId: "<%= gameId %>",
            });
          } else {
            alert(response.data.message);
            return;
          }
        });
      });

      socket.on("isReady", (data) => {
        let userIdForThisClient = data.userId;
        $("#" + userIdForThisClient)
          .find(".toggle-circle")
          .addClass("animate-circle");
          $("#" + userIdForThisClient)
          .find(".rectangle-path")
          .css("stroke", "green");
      });
      socket.on("startGame", (data) => {
        alert(data);
        window.location.href = `/game/gamePage?gameId=${gameId}`;
      });
    });
  </script>
</html>
