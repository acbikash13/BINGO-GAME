<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Rubik+Bubbles&display=swap"
      rel="stylesheet"
    />
    <style>
      button {
        border: white;
        border-radius: 20px;
        padding: 15px;
      }
      body {
        background-image: url("../../assests/homepage5.jpg");
        height: 100vh;
        background-size: cover;
      }
      .displayNumber {
        border-radius: 30px;
        display: flex;
        justify-content: center;
        align-items: center;
        box-shadow: rgba(224, 10, 10, 0.25) 0px 30px 60px -12px,
          rgba(180, 16, 16, 0.3) 0px 50px 36px -18px inset;
      }
      .display-1 {
        font-weight: 400;
        font-family: "Rubik Bubbles", sans-serif;
      }
      .main {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        flex-wrap: wrap-reverse;
      }
      .row {
        background-color: none;
      }
      .playerListBtn {
        border-radius: 30px;
      }
      .menu {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 5px;
      }
      .fields {
        font-size: 4vw;
        font-weight: 100;
        font-family: "Libre Baskerville", serif;
        height: 100%;
        width: 50%;
        border: none;
        border-radius: 35px;
        background-color: #846ba0;
        box-shadow: rgba(0, 0, 0, 0.17) 0px -23px 25px 0px inset,
          rgba(0, 0, 0, 0.15) 0px -36px 30px 0px inset,
          rgba(0, 0, 0, 0.1) 0px -79px 40px 0px inset,
          rgba(0, 0, 0, 0.06) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px,
          rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px,
          rgba(0, 0, 0, 0.09) 0px 32px 16px;
      }

      @media (max-width: 576px) {
        .fields {
          margin:10%;
          width: 80%;
          height: 140%;
        }
      }


      p {
        font-size: 20px;
      }

      /*  this css is for the .fields field removing arrows that ups or downs the numbers */

      /* Chrome, Safari, Edge, Opera */
      .fields::-webkit-outer-spin-button,
      .fields::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }

      /* Firefox */
      .fields[type="number"] {
        -moz-appearance: textfield;
        appearance: textfield;
      }
      /* Chrome, Safari, Edge, Opera */
      .fields::-webkit-outer-spin-button,
      .fields::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }

      /* Firefox */
      .fields[type="number"] {
        -moz-appearance: textfield;
        appearance: textfield;
        text-align: center;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }
      .fields:hover,
      #exit:hover,
      #mute:hover,
      #fill:hover,
      #done:hover {
        background-color: rgb(251, 183, 65);
        cursor: pointer;
        transform: scale(1.3);
      }
     
      .card-body {
        width: 200px;
        background-color: transparent;
        border: none;
      }
      .playersName {
        font-size: larger;
        font-family: Georgia, "Times New Roman", Times, serif;
      }
      .messageArea {
        max-height: 200px;
        min-height: 50px;
        max-width: 250px;
        background-color: none;
        border: solid 1px white;
        border-radius: 30px;
        display: flex;
        align-items: flex-start;
        flex-direction: column;
        scrollbar-width: thin; /* For Firefox */
      }

      /* Scroll bar for message are */
      /* For WebKit-based browsers (Chrome, Safari) */
      /* For WebKit-based browsers (Chrome, Safari) and Microsoft Edge */
      .messageArea::-webkit-scrollbar,
      .messageArea::-webkit-scrollbar-thumb {
        width: 8px; /* Width of the scrollbar */
        height: 20px; /* Height of the scrollbar thumb - adjust as needed */
      }

      /* For WebKit-based browsers (Chrome, Safari) */
      .messageArea::-webkit-scrollbar-thumb {
        background-color: #ccc; /* Color of the scrollbar thumb */
        border-radius: 4px; /* Roundness of the scrollbar thumb */
      }

      /* For Microsoft Edge */
      .messageArea::-ms-scrollbar-thumb {
        background-color: #ccc; /* Color of the scrollbar thumb in Microsoft Edge */
        border-radius: 4px; /* Roundness of the scrollbar thumb in Microsoft Edge */
      }

      /* For scrollbar thumb hover effect in WebKit-based browsers (Chrome, Safari) */
      .messageArea::-webkit-scrollbar-thumb:hover {
        background-color: #aaa; /* Color of the scrollbar thumb on hover */
      }

      /* For scrollbar thumb hover effect in Microsoft Edge */
      .messageArea::-ms-scrollbar-thumb:hover {
        background-color: #aaa; /* Color of the scrollbar thumb on hover in Microsoft Edge */
      }

      /*  */
      .chatbox {
        position: fixed;
        bottom: 1px;
        left: 10px;
        width: 250px;
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
      }
      button {
        background-color: transparent;
        border: solid 1px white;
        border-radius: 30px;
        box-shadow: 12px 12px 24px rgba(89, 184, 174, 0.64);
        transition: all 0.3s ease-in-out 0s;
        cursor: pointer;
        outline: none;
        position: relative;
      }
      .typeMessage {
        background-color: rgb(66, 109, 109);
        border: solid 1px white;
        border-radius: 30px;
      }
      #typeMessageBox::placeholder {
        color: white; /* Replace "your-color" with the desired color value */
      }
      .messages {
        font-family: monospace;
        font-size: 12px;
        color: white;
      }
      .sendMessageBtn {
        background-color: transparent;
        border: solid 1px white;
        border-radius: 30px;
      }

      #turn-indicator {
        font-size: 20px;
        font-family: "Rubik Bubbles", sans-serif;
        bottom: 0;
        right: 0;
      }
      .sendMessageBtn:hover {
        background-color: rgb(66, 109, 109);
      }
      input {
        color: rgb(104, 158, 202);
      }
      .bingo-count {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        gap: 20px;
        font-family: "Rubik Bubbles", sans-serif;
        border-radius: 20px;
      }
      .message-options {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px;
      }
      .bingo-letters {
        font-family: "Rubik Bubbles", sans-serif;
      }
    </style>
  </head>
  <body class="container-fluid">
    <nav class="navbar navbar-expand-lg">
      <button
        class="navbar-toggler"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarNav"
        aria-controls="navbarNav"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon text-info"></span>
      </button>
      <div
        class="collapse mx-auto navbar-collapse justify-content-end"
        id="navbarNav"
      >
        <ul class="navbar-nav align-middle">
          <li class="nav-item active m-2 fill">
            <button class="shadow-lg bg-info" id="fill">Fill</button>
          </li>
          <li class="nav-item m-2 done">
            <button class="shadow-lg bg-info" id="done">Done</button>
          </li>
          <li class="nav-item m-2">
            <button class="shadow-lg bg-info" id="exit"><a class="text-dark" style ="text-decoration: none;" href="/homePage">Exit</a></button>
          </li>
        </ul>
      </div>
    </nav>

    <div class="menu p-2 mx-3">
      <div class="displayNumber p-3  bg-light">
        <h1 class="display-1" id="recentNumber" style="color: gray">Num</h1>
      </div>
      <div class="bingo-count bg-light p-2 text-center shadow-lg">
        <p class="bingo-letters display-2" id="1">B</p>
        <P class="bingo-letters display-2" id="2">I</P>
        <p class="bingo-letters display-2" id="3">N</p>
        <p class="bingo-letters display-2" id="4">G</p>
        <p class="bingo-letters display-2" id="5">O</p>
      </div>
    </div>
    <div class="main">
      <div class="chatbox p-1">
        <div class="messageArea p-3 overflow-auto"></div>
        <div class="justify-content-center mt-1 mx-1 message-options">
          <input
            type="text"
            placeholder="Type your Message"
            class="p-2 typeMessage text-white"
            id="typeMessageBox"
          />
          <button
            type="button"
            id="sendMessageBtn"
            class="sendMessageBtn text-white p-3"
          >
            Send
          </button>
        </div>
        <p class="text-white" id="turn-indicator">Turn: <span id="turn-status">false</span></p>
      </div>
      <div class="container text-center mx-auto my-auto text-center gameBoard">
        <div class="d-flex justify-content-center my-3">
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
        </div>
        <div class="d-flex justify-content-center pt-1 my-3">
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
        </div>
        <div class="d-flex justify-content-center pt-1 my-3">
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
        </div>
        <div class="d-flex justify-content-center pt-1 my-3">
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
        </div>
        <div class="d-flex justify-content-center pt-1 my-4 pb-1">
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
          <div class=""><input type="number" class="fields" /></div>
        </div>
      </div>
    </div>
    <audio id="audioButton" src="../../assests/audio/2.wav" autoplay></audio>
    <audio
      class="bg-danger"
      id="gameAudio"
      src="../../assests/audio/Fluffing-a-Duck.mp3"
      autoplay
      loop
    ></audio>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.socket.io/4.7.2/socket.io.min.js"
      integrity="sha384-mZLF4UVrpi/QTWPA7BjNPEnkIfRFn4ZEO3Qt/HFklTJBj/gBOV8G3HcKn4NfQblz"
      crossorigin="anonymous"
    ></script>
    <script src="../../controller/cookies.js"></script>

    <script>
      const socket = io();
      socket.on("connect", () => {
        let bingoNumbers = [];
        let gameId = `<%= gameId%>`;
        let doneButton = document.getElementById("done");
        let fillButton = document.getElementById("fill");
        let fields = document.querySelectorAll(".fields");
        let audio = document.querySelector("#audioButton");
        let gameAudio = document.querySelector("#gameAudio");
        let bingoLetters = document.querySelectorAll(".bingo-letters");
        let firstName = `<%= firstName %>`;

        let playerState;
        let playersList;
        let userId;
        let playerBoard;
        let gameDocument;
        let bingoCount;
        let isPlayerTurn = false;
        // flag to check if the boxes are filled or not.
        let isFilled = false;
        // check if the player isDone or not. isDone reflects if the player is satisfied with their bingo layout
        let isDone = false;
        // once this flag is set to true, the game is completed and the player can not click on the boxes anymore. We simply exit the game.
        let isGameCompleted = false;
        // Function to initialize game by getting player state and board
        async function initGame() {
          try {
            const playersResponse = await axios({
              method: "post",
              url: "/gameBoard/getPlayersList",
              headers: {
                Authorization: `Bearer ${cookies.get("jwt")}`,
              },
              data: {
                gameId: gameId,
              },
            });
            playersList = playersResponse.data.playerList;
            userId = playersResponse.data.userId;

            // get player state gets the player state for one player that contains the board, isFilled and bingoCount and other information just for that player.
            const stateResponse = await axios({
              method: "post",
              url: "/gameBoard/getPlayerState",
              headers: {
                Authorization: `Bearer ${cookies.get("jwt")}`,
              },
              data: {
                gameId: gameId,
                userId: userId,
              },
            });
            playerState = stateResponse.data;
            playerBoard = playerState.playerState.board;
            isFilled = playerState.playerState.isFilled;
            bingoCount = playerState.playerState.bingoCount;
            console.log("the bingo count is " + bingoCount);
            // for (let i = 1; i <= bingoCount; i++) {
            //   bingoLetters[i].style.color = "green";
            // }

            for (let i = 0; i <= bingoCount; i++) {
              $(`#${i}`).css("color", "green");
            }
            if (bingoCount === 5) {
              isGameCompleted = true;
              alert(
                "COngratulations! " + firstName + " You have won the game!!"
              );
            }
            console.log("bingo Count is " + bingoCount);
            // get the game document
            const gameDocumentResponse = await axios({
              method: "post",
              url: "/gameBoard/getEntireGame",
              headers: {
                Authorization: `Bearer ${cookies.get("jwt")}`,
              },
              data: {
                gameId: gameId,
              },
            });

            gameDocument = gameDocumentResponse.data.gameDocument;

            const player = gameDocument.bingoBoard.playerStates.find(
              (player) => player.userId === userId
            );
            const playerIndex = gameDocument.bingoBoard.playerStates.findIndex(
              (player) => player.userId === userId
            );
            isPlayerTurn = player.isTurn;

            if (isPlayerTurn) {
              document.getElementById("turn-status").innerText = "True";
            } else {
              document.getElementById("turn-status").innerText = "False";
            }



            bingoCount = player.bingoCount;
            console.log("The bingoCount is " + bingoCount);
            if (gameDocument.bingoBoard.numbers.length > 0) {
              $("#recentNumber").text(
                gameDocument.bingoBoard.numbers[
                  gameDocument.bingoBoard.numbers.length - 1
                ]
              );
            }
          } catch (error) {
            console.error("Error during requests: ", error);
          }
        }
        // Call initGame and reapply event listeners after the state is loaded
        initGame().then(() => {
          let bingoNumbersFromPlayerboard = [];

          if (isFilled) {
            isDone = true;
            document.getElementById("done").style.display = "none";
            document.getElementById("fill").style.display = "none";

            for (let rows = 0; rows < 5; rows++) {
              for (let cols = 0; cols < 5; cols++) {
                bingoNumbersFromPlayerboard.push(playerBoard[rows][cols]);
              }
            }

            // Fill the bingoBoard with numbers from playerBoard
            for (let i = 0; i < 25; i++) {
              fields[i].setAttribute("value", bingoNumbersFromPlayerboard[i]);
              if (fields[i].value == 0) {
                fields[i].style.backgroundColor = "purple";
                fields[i].style.pointerEvents = "none";
              }
            }
          }
          // Apply event listeners for field clicks
          addFieldClickListeners();

          // Event listener for "done" button
          doneButton.addEventListener("click", function () {
            if (isFilled && !isDone) {
              done();
            } else {
              alert("Please fill the boxes first!");
            }
          });

          // Event listener for "fill" button
          fillButton.addEventListener("click", fill);

          // Event listener for message send button
          $("#sendMessageBtn").click(function () {
            let message = $("#typeMessageBox").val();
            if (message.trim() !== "") {
              socket.emit("sendMessage", {
                firstName: firstName,
                message: message,
                gameId: gameId,
              });
            }
            $("#typeMessageBox").val("");
          });

          // Socket event for receiving messages
          socket.on("sendMessage", (data) => {
            let message = data.message;
            let firstName = data.firstName;
            let newMessage = $("<p>")
              .addClass("messages")
              .text(firstName + ": " + message);
            $(".messageArea").append(newMessage);
          });

          // Socket event for receiving crossed numbers
          socket.on("bingoNumberCrossed", (data) => {

            let bingoBlockValue = data.value;
            gameId = data.gameId;
            $('input[value="' + bingoBlockValue + '"]').css(
              "background-color",
              "purple"
            );
            $('input[value="' + bingoBlockValue + '"]').css(
              "pointer-events",
              "none"
            );
            $('input[value="' + bingoBlockValue + '"]').val(0);
            $("#recentNumber").text(bingoBlockValue);
            gameDocument = data.gameDocument;
            axios({
                    method: "post",
                    url: "/gameBoard/updateBingoCount",
                    headers: {
                      Authorization: `Bearer ${cookies.get("jwt")}`,
                    },
                    data: {
                      number: bingoBlockValue,
                      gameId: gameId,
                      playerStateId: playersList
                    },
            })
          .then(function (response) { 
            console.log("BingoNumber Updated for the player as well.")
          })
            const playerIndex = gameDocument.bingoBoard.playerStates.findIndex(
              (player) => player.userId === userId
            );

            console.log("The player state is ") + JSON.stringify(gameDocument.bingoBoard.playerStates[playerIndex].board);
            bingoCount = updateBingoCount(gameDocument.bingoBoard.playerStates[playerIndex].board)
            console.log("The bingo count after bingo numbers crossed is " + bingoCount);
            for(let i = 0; i <= bingoCount; i++) {
              $(`#${i}`).css("color", "green");
            }
            gameDocument.bingoBoard.playerStates[playerIndex].bingoCount = bingoCount;
            if (bingoCount === 5) {
                        isGameCompleted = true;
                        socket.emit("winnerFound", {
                          gameId: gameId,
                          gameDocument: gameDocument,
                          winnerName: firstName,
                          bingoCount: bingoCount,
                          userId: userId,
                        });
            }

          });
          socket.on("updatePlayerTurn", (data) => {
            gameDocument = data.gameDocument;
            const playerIndex = gameDocument.bingoBoard.playerStates.findIndex(
              (player) => player.userId === userId
            );
            const player = gameDocument.bingoBoard.playerStates.find(
              (player) => player.userId === userId
            );
            isPlayerTurn = player.isTurn;
          });
          // Socket event for checking winner
          socket.on("winnerFound", (data) => {
            if (data.userId === userId) {
              alert(data.winnerName + ", you have won the game");
              // call an axios request to update the winner in the database and then delete the game document.
              window.location.href = "/homePage";
            } else {
              alert(data.winnerName + " has won the game!");
              // call an axios request to update the winner in the database and then delete the game document.
              window.location.href = "/homePage";
            }
          });
        });
        function 
        updatePlayerTurn() {
          let numberOfPlayers = playersList.length;
          let playerIndex = gameDocument.bingoBoard.playerStates.findIndex(
            (p) => p.userId === userId
          );
          let nextPlayerIndex = (playerIndex + 1) % numberOfPlayers;
          // update the player turn in the gameDocument to false for the current player and true for the next player. Curent player is the one who just clicked a bingo number
          gameDocument.bingoBoard.playerStates[playerIndex].isTurn = false;
          
          if (gameDocument.bingoBoard.playerStates[playerIndex].isTurn) {
            document.getElementById("turn-status").innerText = "True";
          } else {
            document.getElementById("turn-status").innerText = "False";
          }

          gameDocument.bingoBoard.playerStates[nextPlayerIndex].isTurn = true;
        }

        function updateBingoCount(playerStateArray) {
          console.log("The player state array is inside update bingoCOunt is  " + JSON.stringify(playerStateArray));
          let bingoScore = 0;
          //Traversing through row
          for (let row = 0; row < 5; row++) {
            count = 0;
            for (let col = 0; col < 5; col++) {
              if (playerStateArray[row][col] === 0) {
                count++;
              }
            }
            if (count === 5) {
              bingoScore++;
            }
          }

          //Traversing through column
          for (let col = 0; col < 5; col++) {
            count = 0;
            for (let row = 0; row < 5; row++) {
              if (playerStateArray[row][col] === 0) {
                count++;
              }
            }
            if (count === 5) {
              bingoScore++;
            }
          }
          //traversing the diagonal
          // check for two diagonals
          if (
            playerStateArray[0][0] === 0 &&
            playerStateArray[1][1] === 0 &&
            playerStateArray[2][2] === 0 &&
            playerStateArray[3][3] === 0 &&
            playerStateArray[4][4] === 0
          ) {
            bingoScore++;
          }
          if (
            playerStateArray[0][4] === 0 &&
            playerStateArray[1][3] === 0 &&
            playerStateArray[2][2] === 0 &&
            playerStateArray[3][1] === 0 &&
            playerStateArray[4][0] === 0
          ) {
            bingoScore++;
          }

          return bingoScore;
        }

        // Function to add click listeners to fields for crossing numbers
        function addFieldClickListeners() {
          for (let i = 0; i < fields.length; i++) {
            fields[i].addEventListener("click", function () {
              if (isDone) {
                audio.playbackRate = 3;
                audio.play();
                if (isPlayerTurn) {
                  fields[i].style.pointerEvents = "none";
                  fields[i].classList.remove("hover");
                  let crossedNumber = fields[i].value;
                  axios({
                    method: "post",
                    url: "/gameBoard/crossTheNumber",
                    headers: {
                      Authorization: `Bearer ${cookies.get("jwt")}`,
                    },
                    data: {
                      number: crossedNumber,
                      gameId: gameId,
                    },
                  })
                    .then(function (response) {
                      fields[i].style.backgroundColor = "purple";
                      console.log("Game documen tbefore emitting bingo number crossed is " + JSON.stringify(gameDocument.bingoBoard.playerStates));
                      fields[i].value = 0;
                      data = {
                        gameId: gameId,
                        userId: userId,
                        number: crossedNumber,
                        gameDocument: gameDocument,
                        playerStateId: playersList
                      };
                      let playerIndex =
                        gameDocument.bingoBoard.playerStates.findIndex(
                          (player) => player.userId === userId
                        );
                      bingoCrossedNumber(crossedNumber);
                      bingoCount = updateBingoCount(gameDocument.bingoBoard.playerStates[playerIndex].board);
                      axios({
                        method: "post",
                        url: "/gameBoard/updateBingoCount",
                        headers: {
                          Authorization: `Bearer ${cookies.get("jwt")}`,
                        },
                        data: data,
                      })
                      .then(function (response) {
                        if (response.status === 200) {
                          console.log("Bingo count updated");
                        } else {
                          console.log("Error in updating bingo count");
                        }
                      })
                      .catch(function (error) {
                        console.log(error);
                        alert(error);
                      });
                      // update the player turn in the database.
                      axios({
                        method: "post",
                        url: "/gameBoard/updatePlayerTurn",
                        headers: {
                          Authorization: `Bearer ${cookies.get("jwt")}`,
                        },
                        data: data,
                      })
                      .then(function (response) {
                        if (response.status === 200) {
                          console.log("Player turn updated");
                        }
                      })
                      .catch(function (error) {
                        console.log(error);
                        alert(error);
                      });
                      // once the player turn has been updated, we do the same logic to update the player turn  in client side. We only reload the gameDocument if the user reconnects.
                      // only in this case we will have to check if the user is the current player or not by getting the data from the server.
                      updatePlayerTurn();
                      // console.log(
                      //   "Is player turn: " +
                      //     isPlayerTurn +
                      //     " for the user " +
                      //     userId
                      // );
                      socket.emit("updatePlayerTurn", data);
                      for (let i = 0; i <= bingoCount; i++) {
                        $(`#${i}`).css("color", "green");
                      }
                      console.log("The bingo count before emitting winnerfound is " + bingoCount);
                      if (bingoCount === 5) {
                        isGameCompleted = true;
                        socket.emit("winnerFound", {
                          gameId: gameId,
                          gameDocument: gameDocument,
                          winnerName: firstName,
                          bingoCount: bingoCount,
                          userId: userId,
                        });
                      }
                    })
                    .catch(function (error) {
                      console.log(error);
                      alert(error);
                    });
                } else {
                  alert("It is not your turn!");
                }
              } else {
                alert("Please click on the fill button first!");
              }
            });
          }
        }

        function bingoCrossedNumber(bingoNumber) {
          let playerStatesObj = gameDocument.bingoBoard.playerStates;
          //Now replace the bingo crossed number With the 0
          for (let aPlayer of playerStatesObj) {
            let bingoBoardForAPlayer = aPlayer.board;
            // iterate through the bingoBoard and find 1
            for (let rows = 0; rows < 5; rows++) {
              for (let columns = 0; columns < 5; columns++) {
                if (
                  bingoBoardForAPlayer[rows][columns] === Number(bingoNumber)
                ) {
                  bingoBoardForAPlayer[rows][columns] = 0;
                  break;
                }
              }
            }
            gameDocument.bingoBoard.playerStates = playerStatesObj;
            gameDocument.bingoBoard.numbers.push(bingoNumber);
            socket.emit("bingoNumberCrossed", {
              gameId: gameId,
              gameDocument: gameDocument,
              value: bingoNumber, // the number that was crossed
            });
          }
        }
      
        // set the input fields to read only so that the user can not input any of their own numbers.
        for (let i = 0; i < 25; i++) {
          fields[i].setAttribute("readonly", true);
        }
        // Function to handle "done" action
        function done() {
          $(".fill").css("display", "none");
          $(".done").css("display", "none");
          $("#audioButton").css("display", "none");
          isDone = true;
          let bingoBoardsAfterDone = [];
          let playerIndex = gameDocument.bingoBoard.playerStates.findIndex(
            (player) => player.userId === userId
          );
          for (let i = 0; i < 5; i++) {
            bingoBoardsAfterDone.push(bingoNumbers.slice(i * 5, i * 5 + 5));
          }
          gameDocument.bingoBoard.playerStates[playerIndex].board =
            bingoBoardsAfterDone;
          console.log("The game board for the player after done is " + JSON.stringify(gameDocument.bingoBoard.playerStates));
          let dataOnDone = {
            playerIndex: playerIndex,
            gameId: gameId,
            userId: userId,
            gameDocument: gameDocument,
          };
          socket.emit("onDone", dataOnDone);

          axios({
            method: "post",
            url: "/gameBoard/setBingoNumber",
            headers: {
              Authorization: `Bearer ${cookies.get("jwt")}`,
            },
            data: {
              gameId: gameId,
              numbers: bingoNumbers,
              userId: userId,
            },
          })
            .then(function (response) {
              alert(response.data.message);
            })
            .catch(function (error) {
              console.log(error);
              alert(error);
            });
        }
        socket.on("onDone", (data) => {
          gameDocument = data.gameDocument;
          console.log("The game document inside onDone is " + JSON.stringify(gameDocument.bingoBoard.playerStates));
        });
        // Function to fill the board with random numbers
        function fill() {
          isFilled = true;
          gameAudio.play();

          axios({
            method: "post",
            url: "/gameBoard/getNumbers",
            headers: {
              Authorization: `Bearer ${cookies.get("jwt")}`,
            },
          })
            .then(function (response) {
              let listOfNumbers = response.data.listOfNumbers;
              bingoNumbers = listOfNumbers;

              for (let i = 0; i < 25; i++) {
                fields[i].setAttribute("value", listOfNumbers[i]);
              }
            })
            .catch(function (error) {
              console.log(error);
              console.log("Error in fill function");
            });
        }
      });
    </script>
  </body>
</html>
