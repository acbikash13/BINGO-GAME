<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <style>
        button{
        border: white;
        border-radius: 20px;
        padding: 15px;
        
     }
        .displayNumber{
            border-radius:30px ;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: rgba(224, 10, 10, 0.25) 0px 30px 60px -12px , rgba(180, 16, 16, 0.3) 0px 50px 36px -18px inset;
            margin-right: 40px;

        }
        .display-1 {
            font-weight: 400;
            font-family:fantasy;
        }
        .main{
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap-reverse;
        }
        /* Css for Chat Box */
        
/*             
            .chatArea{
                height: 200px;
                width: 100%;
                padding: 5px;
                overflow-y: auto;
                background: white;
                border-radius: 3px;
                color: rgba(0, 0, 0, 0);
                -webkit-text-fill-color: black;
                box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
            } */
            *::-webkit-scrollbar,
            *::-webkit-scrollbar-thumb {
                width: 26px;
                border-radius: 13px;
                background-clip: padding-box;
                border: 10px solid transparent;
            }

            *::-webkit-scrollbar-thumb {        
                box-shadow: inset 0 0 0 10px;
            }
            .gameBoard{
                height: 100%;
                background-color: white;

            }

        .fields{
            font-size: 4vw;
            font-weight: 100;
            font-family: 'Libre Baskerville', serif; 
            height: 100%;
            width: 60%;
            border: none;
            border-radius: 35px;
            box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;
            
        }
        .players-info{
            box-shadow: rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset, rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;

        }
        p {
            font-size: 20px;
        }

        /*  this css is for the .fields field removing arrows that ups or downs the numbers */

        /* Chrome, Safari, Edge, Opera */
        .fields::-webkit-outer-spin-button,
        .fields::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
        }

        /* Firefox */
        .fields[type=number] {
        -moz-appearance: textfield;
        appearance: textfield;
        }
        /* Chrome, Safari, Edge, Opera */
        .fields::-webkit-outer-spin-button,
        .fields::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
        }

        /* Firefox */
        .fields[type=number] {
            -moz-appearance: textfield;
            appearance: textfield;
            text-align: center;  
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;

        }
        .fields:hover, #exit:hover,#fill:hover, #done:hover {
            background-color: rgba(79,209,197,1);
            cursor: pointer;
            transform: scale(1.3);
            box-shadow: 0 0 10px rgba(123, 40, 40, 0.5);
        }
        /* css for menu butons */
        .wrap {
            display: flex;
            align-items: center;
            justify-content: center;
            }

        button {
            background:   rgba(89, 184, 174, 0.64);
            background: linear-gradient(90deg, rgba(129,230,217,1) 0%, rgba(79,209,197,1) 100%);
            box-shadow: 12px 12px 24px rgba(89, 184, 174, 0.64);
            transition: all 0.3s ease-in-out 0s;
            cursor: pointer;
            outline: none;
            position: relative;
         }
    </style>
</head>
<body class="bg-dark">
    <nav class="navbar navbar-expand-lg bg-light">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse mx-auto navbar-collapse justify-content-end" id="navbarNav">
          <ul class="navbar-nav">
            <li class="nav-item active m-2 fill">
                <button class="shadow-lg" id="fill">Fill</button>
            </li>
            <li class="nav-item m-2 done">
                <button class="shadow-lg" id="done">Done</button>
            </li>
            <li class="nav-item m-2">
                <button class="shadow-lg" id="exit">Exit</button>
            </li>
          </ul>
        </div>
      </nav>
    <div class="container-fluid p-3 menu">
            <div class="col-lg-2  col-sm-12 col-m-12 displayNumber bg-white">
                <h1 class="display-1" id="recentNumber">Num</h1>
            </div>
            <div class="col-lg-4  col-sm-12 col-m-12 players-info bg-light  rounded shadow-lg text-center mt-3">
                <div class="row players-name p-2">
                    <div class="col-6 p-2">
                        <p class="text-center text-primary rounded bg-light"><%= firstName%></p>
                    </div>
                    <div class="col-6 p-2">
                        <p class="textboxes-center text-primary rounded bg-light"> {user}: BINGO</p>
                    </div>
                    <div class="col-6 p-2">
                        <p class="text-center text-primary rounded bg-light"> {user}: BINGO</p>
                    </div>
                    <div class="col-6 p-2">
                        <p class="text-center text-primary rounded bg-light"> {user}: BINGO</p>
                    </div>
                </div>
            </div>
    </div>
    <div class="main bg-light">
        <div class=" chatbox p-3 bg-danger">
            <div class="messageArea p-3 bg-info"></div>
            <input type="text" class="p-3 bg-light">
        </div>
        <div class="container text-center mx-auto my-auto  text-center gameBoard bg-dark">
                <div class="row d-flex justify-content-center ">
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                </div>
                <div class="row d-flex justify-content-center  pt-1">
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                </div>
                <div class="row d-flex justify-content-center pt-1">
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                </div>
                <div class="row d-flex justify-content-center pt-1">
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                </div>
                <div class="row d-flex justify-content-center pt-1 pb-1">
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                    <div class="col-2 boxes col-sm-2 col-md-2"><input type="number" class="fields"></div>
                </div>
        </div> 
    </div>
    <audio id="audioButton" src="../../assests/audio/2.wav" autoplay></audio>
    <audio class="bg-danger"  id="gameAudio"  src="../../assests/audio/Fluffing-a-Duck.mp3" autoplay loop></audio>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous">
    </script>
        <script src="https://cdn.socket.io/4.7.2/socket.io.min.js" integrity="sha384-mZLF4UVrpi/QTWPA7BjNPEnkIfRFn4ZEO3Qt/HFklTJBj/gBOV8G3HcKn4NfQblz" crossorigin="anonymous"></script>
    <script src="../../controller/cookies.js"></script>

    <script>
        const socket = io();
        socket.on('connect',()=>{
            let bingoNumbers = [];
            let gameId = `<%= gameId%>`
            let doneButton = document.getElementById("done");
            let fillButton = document.getElementById("fill");
            let fields = document.querySelectorAll(".fields");
            let audio = document.querySelector("#audioButton");
            let gameAudio = document.querySelector("#gameAudio");
            console.log(fields)
            // flag to check if the boxes are filled or not.
            let isFilled = false;
            //check if the players is isDone or not. isDone reflects if the player is satisfied with their bingo layout
            let isDone= false;        
            //isDone checks whether the elements are set to non editable or not.
            //code to set the numbers when clicked on the done button. This will not let change the numbers 
            // we will store the indexes of the crossed 
    
    
            
            // create a room
            socket.emit('createRoom',{gameId:gameId});
            console.log(gameId + "gameId is ")
            axios({
                method: 'get',
                url: '/game/gamePage', // Update the URL to your protected profile route
                headers: {
                    'Authorization': `Bearer ${cookies.get('jwt')}`
                }
            })
            .then(function (response) {
            
            })
            .catch(function (error) {
                if (error.response.status === 401) {
                alert(error.response.data.message);
                window.location.href = '/login';
                }
                else {
                console.log("Error is "+ error);
                }
            });
            // this stores the BingoNumbers for a user. These are in random order ranging from 1 to 25. We update it to our numbers once we finalise our bingoBoard with the numbers.     
            // Makes the input field read only. Do it in the server side so that it is not easy to manipulate
            $(".fields").prop('readonly', true);
            doneButton.addEventListener('click', function(){
                if (isFilled){
                    done();
                }
                else {
                    alert('Please fill the boxes first!')
                }
            });
            function done(){ 
                $(".fill").css("display","none");
                $(".done").css("display","none");
                $("#audioButton").css("display","none");
                isDone = true;
                for (let i= 0; i<25; i++){
                    fields[i].setAttribute('readonly', true);
                }
                console.log(bingoNumbers + " inside the done event funciton!")
                // axios call to set the gameBoard for this player
                axios({
                    method : 'post',
                    url : '/gameBoard/setBingoNumber',
                    headers: {
                        'Authorization': `Bearer ${cookies.get('jwt')}`
                    },
                    data:{
                        gameId:gameId,
                        numbers : bingoNumbers
                    }
                })
                .then(function(response){
                    alert(response.data.message);
                })
                .catch(function(error){
                    alert(response.data.message);
                })
                // this block of code is to cross the numbers whenever the users clicks on the numbers,or we can just change the color of the blocks.
                // First we have to make sure, the numbers are set Done i.e they are read only afer we click the done button, or the Done button and we have to store the numbers click on some sort of grid.
                if(isDone){ 
                    for(let i = 0; i < fields.length; i++){  
                        fields[i].addEventListener('click',function(){
                                audio.playbackRate = 3;
                                audio.play();
                                fields[i].style.pointerEvents = 'none';
                                fields[i].classList.remove("hover");
                                let crossedNumber = fields[i].value;
                                axios({
                                    method:'post',
                                    url: '/gameBoard/crossTheNumber',
                                    headers: {
                                        'Authorization': `Bearer ${cookies.get('jwt')}`
                                    },
                                    data: {
                                        number: crossedNumber,
                                        gameId: gameId
                                    }
                                })
                                .then(function(response){
                                    fields[i].style.backgroundColor = 'purple';
                                    // once the number is purple on the user, send the bingoCrossed event the server and then the server will broadcast to all the other users.
                                    data = {
                                        gameId: `<%= gameId%>`,
                                        value: fields[i].value
                                    }
                                    socket.emit('bingoNumberCrossed', data)

                                    axios({
                                            method:'post',
                                        url: '/game/checkWinner',
                                        headers: {
                                            'Authorization': `Bearer ${cookies.get('jwt')}`
                                        },
                                        data: {
                                            gameId: gameId
                                        }
                                    })
                                    .then(function(response){
                                        console.log("This is the test to check the winner")
                                    })
                                    .catch(function(error){
                                        console.log(error)
                                    })



                                })
                                .catch(function(error){
                                    console.log(error);
                                    alert(error)
                                })
                            });
                    }
                } 
            }
    
            // Fills the numbers randomly generated in the database
            fillButton.addEventListener('click',fill);
            function fill(){
                isFilled = true;
                gameAudio.play();
                axios({
                    method:'post',
                    url : '/gameBoard/getNumbers',
                    headers: {
                        'Authorization': `Bearer ${cookies.get('jwt')}`
                    }
                })
                .then(function(response){
            
                    let listOfNumbers = response.data.listOfNumbers;
                    bingoNumbers = listOfNumbers;
                    console.log(bingoNumbers + " inside the fill funciton!")
                    for (let i= 0; i<25; i++){
                        //inputs[i].value='0';
                        fields[i].setAttribute('value',listOfNumbers[i]);
                    }
                })
                .catch(function(error){
                    console.log(error);
                    console.log("Error in fill function")
                })
            }

            socket.on('bingoNumberCrossed',(data)=>{
                let bingoBlockValue = data.value;
                $('input[value="' + bingoBlockValue + '"]').css('background-color', 'purple');
                $('#recentNumber').text(bingoBlockValue);      
            })
            socket.on('checkWinner',(data)=>{
                if(data.winner){
                    console.log("Winner found")

                }
            })
        })
</script>

</body>

</html>