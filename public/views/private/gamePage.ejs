<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <style>
        button{
            border: white;
            border-radius: 20px;
            padding: 15px;
        }
        body{
            background-image: url('../../assests/homepage6.jpg');
        }
        .displayNumber{
            border-radius:30px ;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: rgba(224, 10, 10, 0.25) 0px 30px 60px -12px , rgba(180, 16, 16, 0.3) 0px 50px 36px -18px inset;
            margin-right: 40px;

        }
        .display-1 {
            font-weight: 400;
            font-family:fantasy;
        }
        .main{
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap-reverse;
        }
        .playersList {
            display: flex;
            align-items: center;
        }
        
        .row {
            background-color: none;
        }
        .gameBoard{
            height: 100%;

        }
        .playerListBtn{
            border-radius: 30px;
        }
        .menu {
            display: flex;
            justify-content: center;
            align-items: center
            ;
        }

        .fields{
            font-size: 4vw;
            font-weight: 100;
            font-family: 'Libre Baskerville', serif; 
            height: 100%;
            width: 60%;
            border: none;
            border-radius: 35px;
            background-color: #846ba0;
            box-shadow: rgba(0, 0, 0, 0.17) 0px -23px 25px 0px inset, rgba(0, 0, 0, 0.15) 0px -36px 30px 0px inset, rgba(0, 0, 0, 0.1) 0px -79px 40px 0px inset, rgba(0, 0, 0, 0.06) 0px 2px 1px, rgba(0, 0, 0, 0.09) 0px 4px 2px, rgba(0, 0, 0, 0.09) 0px 8px 4px, rgba(0, 0, 0, 0.09) 0px 16px 8px, rgba(0, 0, 0, 0.09) 0px 32px 16px;
            
        }
        p {
            font-size: 20px;
            
        }

        /*  this css is for the .fields field removing arrows that ups or downs the numbers */

        /* Chrome, Safari, Edge, Opera */
        .fields::-webkit-outer-spin-button,
        .fields::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
        }

        /* Firefox */
        .fields[type=number] {
        -moz-appearance: textfield;
        appearance: textfield;
        }
        /* Chrome, Safari, Edge, Opera */
        .fields::-webkit-outer-spin-button,
        .fields::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
        }

        /* Firefox */
        .fields[type=number] {
            -moz-appearance: textfield;
            appearance: textfield;
            text-align: center;  
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;

        }
        .fields:hover, #exit:hover,#fill:hover, #done:hover {
            background-color: rgb(251,183,65);
            cursor: pointer;
            transform: scale(1.3);
        }
        .menu{
            width: 30%;
            display: flex;
            justify-content: flex-end;
            align-items: center;
        }
        .card-body {
            width: 200px; 
            background-color: transparent; 
            border: none;
        }
        .playersName{
            font-size: larger;
            font-family: Georgia, 'Times New Roman', Times, serif;
        }
        .messageArea{
            height: 300px;
            width: 300px;
            background-color: none;
            border: solid 1px white;
            border-radius: 30px;
            display: flex;
            align-items: flex-start;
            flex-direction: column;
            scrollbar-width: thin; /* For Firefox */
        }

        /* Scroll bar for message are */
        /* For WebKit-based browsers (Chrome, Safari) */
        /* For WebKit-based browsers (Chrome, Safari) and Microsoft Edge */
        .messageArea::-webkit-scrollbar,
        .messageArea::-webkit-scrollbar-thumb {
            width: 8px; /* Width of the scrollbar */
            height: 20px; /* Height of the scrollbar thumb - adjust as needed */
        }

        /* For WebKit-based browsers (Chrome, Safari) */
        .messageArea::-webkit-scrollbar-thumb {
            background-color: #ccc; /* Color of the scrollbar thumb */
            border-radius: 4px; /* Roundness of the scrollbar thumb */
        }

        /* For Microsoft Edge */
        .messageArea::-ms-scrollbar-thumb {
            background-color: #ccc; /* Color of the scrollbar thumb in Microsoft Edge */
            border-radius: 4px; /* Roundness of the scrollbar thumb in Microsoft Edge */
        }

        /* For scrollbar thumb hover effect in WebKit-based browsers (Chrome, Safari) */
        .messageArea::-webkit-scrollbar-thumb:hover {
            background-color: #aaa; /* Color of the scrollbar thumb on hover */
        }

        /* For scrollbar thumb hover effect in Microsoft Edge */
        .messageArea::-ms-scrollbar-thumb:hover {
            background-color: #aaa; /* Color of the scrollbar thumb on hover in Microsoft Edge */
        }

        /*  */
        .chatbox {
            display: flexbox;
            flex-wrap: wrap;
        }
        button{
            background-color: transparent;
            border: solid 1px white;
            border-radius: 30px;
            box-shadow: 12px 12px 24px rgba(89, 184, 174, 0.64);
            transition: all 0.3s ease-in-out 0s;
            cursor: pointer;
            outline: none;
            position: relative;
         }
         .typeMessage{
            background-color: rgb(66, 109, 109);
            border: solid 1px white;
            border-radius: 30px;
         }
         #typeMessageBox::placeholder {
            color: white; /* Replace "your-color" with the desired color value */
        }
         .messages{
            font-family:monospace;
            font-size: 15px;
            color: white;
         }
         .sendMessageBtn{
            background-color: transparent;
            border: solid 1px white;
            border-radius: 30px;

         }
         .sendMessageBtn:hover{
            background-color: rgb(66, 109, 109);
         }
         input{
            color: rgb(104, 158, 202);
         }
    </style>
</head>
<body class="container-fluid">
    <nav class="navbar navbar-expand-lg">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse mx-auto navbar-collapse justify-content-end" id="navbarNav">
          <ul class="navbar-nav align-middle">
            <li class="nav-item playersList">
                <div class="align-middle">
                    <button class="btn btn-primary playerListBtn shadow-lg p-3" type="button" data-bs-toggle="collapse" data-bs-target="#collapseWidthExample" aria-expanded="false" aria-controls="collapseWidthExample">
                        Players List
                    </button>
                    <div class="playerListDiv">
                        <div class="collapse collapse-horizontal"   id="collapseWidthExample">
                            <div class="card card-body">
                                <ul>
                                    <li class="text-light playersName" id=""><%=firstName %></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </li>
            <li class="nav-item active m-2 fill">
                <button class="shadow-lg" id="fill">Fill</button>
            </li>
            <li class="nav-item m-2 done">
                <button class="shadow-lg" id="done">Done</button>
            </li>
            <li class="nav-item m-2">
                <button class="shadow-lg" id="exit">Exit</button>
            </li>
        </ul>
        </div>
    </nav>
    <div class="container text-center menu p-3">
        <div class="displayNumber p-3">
            <h1 class="display-1 text-info" id="recentNumber">Num</h1>
        </div>
    </div>
    <div class="main">
        <div class="chatbox p-2">
            <div class="messageArea p-3 overflow-auto">
                <p class="messages">
                    <%=firstName %>:Hello! Hola!
                </p>
            </div>
            <div>
                <input type="text" placeholder="Type your Message" class="p-2 typeMessage text-white" id="typeMessageBox">
                <button type="button" id="sendMessageBtn" class="sendMessageBtn text-white">Send</button>
            </div>
        </div>
        <div class="container text-center mx-auto my-auto  text-center gameBoard">
                <div class=" d-flex justify-content-center">
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                </div>
                <div class="d-flex justify-content-center  pt-1">
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                </div>
                <div class=" d-flex justify-content-center pt-1">
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                </div>
                <div class="d-flex justify-content-center pt-1">
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                </div>
                <div class="d-flex justify-content-center pt-1 pb-1">
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                    <div class=""><input type="number" class="fields"></div>
                </div>
        </div> 
    </div>
    <audio id="audioButton" src="../../assests/audio/2.wav" autoplay></audio>
    <audio class="bg-danger"  id="gameAudio"  src="../../assests/audio/Fluffing-a-Duck.mp3" autoplay loop></audio>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous">
    </script>
        <script src="https://cdn.socket.io/4.7.2/socket.io.min.js" integrity="sha384-mZLF4UVrpi/QTWPA7BjNPEnkIfRFn4ZEO3Qt/HFklTJBj/gBOV8G3HcKn4NfQblz" crossorigin="anonymous"></script>
    <script src="../../controller/cookies.js"></script>

    <script>
        const socket = io();
        socket.on('connect',()=>{
            let bingoNumbers = [];
            let gameId = `<%= gameId%>`
            let doneButton = document.getElementById("done");
            let fillButton = document.getElementById("fill");
            let fields = document.querySelectorAll(".fields");
            let audio = document.querySelector("#audioButton");
            let gameAudio = document.querySelector("#gameAudio");
            let firstName = `<%= firstName %>`
            console.log('firstname is ' + firstName)

            // flag to check if the boxes are filled or not.
            let isFilled = false;
            //check if the players is isDone or not. isDone reflects if the player is satisfied with their bingo layout
            let isDone= false;        
            //isDone checks whether the elements are set to non editable or not.
            //code to set the numbers when clicked on the done button. This will not let change the numbers 
            // we will store the indexes of the crossed 
    
            

            
            // create a room
            socket.emit('createRoom',{gameId:gameId});

            // function that handles the message functionality

            $("#sendMessageBtn").click(function(){
                let message = $("#typeMessageBox").val();
                socket.emit('sendMessage',{firstName:firstName,message:message, gameId:gameId});
                $("#typeMessageBox").val("");
            })

            socket.on('sendMessage',(data)=>{
                // get the name and the message from the sendMessage data
                let message = data.message;
                let firstName = data.firstName;
                 // Create a new <p> element with the message content
                let newMessage = $('<p>').addClass('messages').text(firstName + ': ' + message);
                //append the name and the data to the .messageArea div
                $(".messageArea").append(newMessage);
            })
            
            axios({
                method: 'get',
                url: '/game/gamePage', // Update the URL to your protected profile route
                headers: {
                    'Authorization': `Bearer ${cookies.get('jwt')}`
                }
            })
            .then(function (response) {
            
            })
            .catch(function (error) {
                if (error.response.status === 401) {
                alert(error.response.data.message);
                window.location.href = '/login';
                }
                else {
                console.log("Error is "+ error);
                }
            });
            // this stores the BingoNumbers for a user. These are in random order ranging from 1 to 25. We update it to our numbers once we finalise our bingoBoard with the numbers.     
            // Makes the input field read only. Do it in the server side so that it is not easy to manipulate
            $(".fields").prop('readonly', true);
            doneButton.addEventListener('click', function(){
                if (isFilled){
                    done();
                }
                else {
                    alert('Please fill the boxes first!')
                }
            });
            function done(){ 
                $(".fill").css("display","none");
                $(".done").css("display","none");
                $("#audioButton").css("display","none");
                isDone = true;
                for (let i= 0; i<25; i++){
                    fields[i].setAttribute('readonly', true);
                }
                console.log(bingoNumbers + " inside the done event funciton!")
                // axios call to set the gameBoard for this player
                axios({
                    method : 'post',
                    url : '/gameBoard/setBingoNumber',
                    headers: {
                        'Authorization': `Bearer ${cookies.get('jwt')}`
                    },
                    data:{
                        gameId:gameId,
                        numbers : bingoNumbers
                    }
                })
                .then(function(response){
                    alert(response.data.message);
                })
                .catch(function(error){
                    alert(response.data.message);
                })
                // this block of code is to cross the numbers whenever the users clicks on the numbers,or we can just change the color of the blocks.
                // First we have to make sure, the numbers are set Done i.e they are read only afer we click the done button, or the Done button and we have to store the numbers click on some sort of grid.
                if(isDone){ 
                    for(let i = 0; i < fields.length; i++){  
                        fields[i].addEventListener('click',function(){
                                audio.playbackRate = 3;
                                audio.play();
                                fields[i].style.pointerEvents = 'none';
                                fields[i].classList.remove("hover");
                                let crossedNumber = fields[i].value;
                                axios({
                                    method:'post',
                                    url: '/gameBoard/crossTheNumber',
                                    headers: {
                                        'Authorization': `Bearer ${cookies.get('jwt')}`
                                    },
                                    data: {
                                        number: crossedNumber,
                                        gameId: gameId
                                    }
                                })
                                .then(function(response){
                                    fields[i].style.backgroundColor = 'purple';
                                    // once the number is purple on the user, send the bingoCrossed event the server and then the server will broadcast to all the other users.
                                    data = {
                                        gameId: `<%= gameId%>`,
                                        value: fields[i].value
                                    }
                                    socket.emit('bingoNumberCrossed', data)

                                    axios({
                                            method:'post',
                                        url: '/game/checkWinner',
                                        headers: {
                                            'Authorization': `Bearer ${cookies.get('jwt')}`
                                        },
                                        data: {
                                            gameId: gameId
                                        }
                                    })
                                    .then(function(response){
                                        console.log("This is the test to check the winner")
                                    })
                                    .catch(function(error){
                                        console.log(error)
                                    })



                                })
                                .catch(function(error){
                                    console.log(error);
                                    alert(error)
                                })
                            });
                    }
                } 
            }
    
            // Fills the numbers randomly generated in the database
            fillButton.addEventListener('click',fill);
            function fill(){
                isFilled = true;
                gameAudio.play();
                axios({
                    method:'post',
                    url : '/gameBoard/getNumbers',
                    headers: {
                        'Authorization': `Bearer ${cookies.get('jwt')}`
                    }
                })
                .then(function(response){
            
                    let listOfNumbers = response.data.listOfNumbers;
                    bingoNumbers = listOfNumbers;
                    console.log(bingoNumbers + " inside the fill funciton!")
                    for (let i= 0; i<25; i++){
                        //inputs[i].value='0';
                        fields[i].setAttribute('value',listOfNumbers[i]);
                    }
                })
                .catch(function(error){
                    console.log(error);
                    console.log("Error in fill function")
                })
            }

            socket.on('bingoNumberCrossed',(data)=>{
                let bingoBlockValue = data.value;
                $('input[value="' + bingoBlockValue + '"]').css('background-color', 'purple');
                $('#recentNumber').text(bingoBlockValue);      
            })
            socket.on('checkWinner',(data)=>{
                if(data.winner){
                    console.log("Winner found")

                }
            })
        })
</script>

</body>

</html>